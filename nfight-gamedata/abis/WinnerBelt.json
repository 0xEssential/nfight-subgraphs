{
  "address": "0x6122C5987c3ef541f0d7B7D56bBC91f56654a386",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_LINK_KEY_HASH",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_LINK_ADDRESS",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LINK_VRF_COORDINATOR_ADDRESS",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH_ADDRESS",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentRaffle",
          "type": "uint256"
        }
      ],
      "name": "RaffleEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LINK_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANCHE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "addSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowancesSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffle",
          "type": "uint256"
        }
      ],
      "name": "buildMessages",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "message",
              "type": "bytes32"
            }
          ],
          "internalType": "struct WinnerBelt.Signable[]",
          "name": "signables",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "createMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRaffle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "platinum",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "gold",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "silver",
          "type": "address[]"
        }
      ],
      "name": "devMintMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryIndex",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "openRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raffleEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raffleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setClearingEntropy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trancheEntropy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trancheOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trancheRaffleEntries",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trancheShuffled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedAllowances",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbeb796abd8c6adef85d5b64dae81975cfd2cf96e883565b6d542d5f38f58906a",
  "receipt": {
    "to": null,
    "from": "0x2cE6BD653220436eB8f35E146B0Dd1a6013E97a7",
    "contractAddress": "0x6122C5987c3ef541f0d7B7D56bBC91f56654a386",
    "transactionIndex": 8,
    "gasUsed": "3354219",
    "logsBloom": "0x
    "blockHash": "0x1f7c775733db22a3d1735eb4754be2866501283cfb6702fe6df589ba977508c6",
    "transactionHash": "0xbeb796abd8c6adef85d5b64dae81975cfd2cf96e883565b6d542d5f38f58906a",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 25785821,
        "transactionHash": "0xbeb796abd8c6adef85d5b64dae81975cfd2cf96e883565b6d542d5f38f58906a",
        "address": "0x6122C5987c3ef541f0d7B7D56bBC91f56654a386",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002ce6bd653220436eb8f35e146b0dd1a6013e97a7"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x1f7c775733db22a3d1735eb4754be2866501283cfb6702fe6df589ba977508c6"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 25785821,
        "transactionHash": "0xbeb796abd8c6adef85d5b64dae81975cfd2cf96e883565b6d542d5f38f58906a",
        "address": "0x6122C5987c3ef541f0d7B7D56bBC91f56654a386",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000002ce6bd653220436eb8f35e146b0dd1a6013e97a7",
          "0x0000000000000000000000002ce6bd653220436eb8f35e146b0dd1a6013e97a7"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x1f7c775733db22a3d1735eb4754be2866501283cfb6702fe6df589ba977508c6"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 25785821,
        "transactionHash": "0xbeb796abd8c6adef85d5b64dae81975cfd2cf96e883565b6d542d5f38f58906a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002ce6bd653220436eb8f35e146b0dd1a6013e97a7",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001657d85d77efeda0000000000000000000000000000000000000000000000001d97cc24ecf55c300000000000000000000000000000000000000000000009d70bbb02b23e0b804c0000000000000000000000000000000000000000000000001c324e9f15765d560000000000000000000000000000000000000000000009d70d208038158a7f26",
        "logIndex": 31,
        "blockHash": "0x1f7c775733db22a3d1735eb4754be2866501283cfb6702fe6df589ba977508c6"
      }
    ],
    "blockNumber": 25785821,
    "cumulativeGasUsed": "4177415",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
    "0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889"
  ],
  "solcInputHash": "b8084b2677d50c41c225cd329e32aebd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_LINK_KEY_HASH\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_LINK_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LINK_VRF_COORDINATOR_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH_ADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRaffle\",\"type\":\"uint256\"}],\"name\":\"RaffleEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANCHE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"addSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowancesSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffle\",\"type\":\"uint256\"}],\"name\":\"buildMessages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"internalType\":\"struct WinnerBelt.Signable[]\",\"name\":\"signables\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"createMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"platinum\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"gold\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"silver\",\"type\":\"address[]\"}],\"name\":\"devMintMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryIndex\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"openRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setClearingEntropy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheEntropy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheRaffleEntries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheShuffled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedAllowances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RaffleEntered(address,uint256)\":{\"params\":{\"currentRaffle\":\"Index of entry in raffleEntries\",\"user\":\"Address of raffle participant\"}}},\"kind\":\"dev\",\"methods\":{\"allowancesSigner()\":{\"returns\":{\"_0\":\"the allowance signer address\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buildMessages(uint256)\":{\"details\":\"Each message is signed off-chain and provided to a dApp alongside the encoded data. Minters can submit the data and signature to the L1 NFT contract to mint their assigned token.\",\"params\":{\"raffle\":\"the raffle tranche\"},\"returns\":{\"signables\":\"messages for signing and the data encoded in each message\"}},\"createMessage(address,uint256)\":{\"params\":{\"account\":\"the account to allow\",\"nonce\":\"the nonce\"},\"returns\":{\"_0\":\"the message to sign\"}},\"enterRaffle(uint256)\":{\"params\":{\"tokenId\":\"ERC1155 tokenId determines payment required\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setClearingEntropy()\":{\"details\":\"VRF has a gas limit on callback which would cause clearing to fail in one tx.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"},\"validateSignature(address,uint256,bytes)\":{\"details\":\"It ensures that _allowancesSigner signed a message containing (account, nonce, address(this))      and that this message was not already used\",\"params\":{\"account\":\"the account the allowance is associated to\",\"nonce\":\"the nonce associated to this allowance\",\"signature\":\"the signature by the allowance signer wallet\"},\"returns\":{\"_0\":\"the message to mark as used\"}}},\"stateVariables\":{\"raffleStartTime\":{\"details\":\"Tranches will end at start time + TRANCHE_LENGTH * currentRaffle\"},\"tokenMap\":{\"details\":\"1-based\"},\"trancheOffset\":{\"details\":\"Each tranche shuffles entry indices. To calculate the tokenId, we sum trancheOfsset + shuffledEntryIndex\"}},\"version\":1},\"userdoc\":{\"events\":{\"RaffleEntered(address,uint256)\":{\"notice\":\"Emitted after a successful raffle entry\"}},\"kind\":\"user\",\"methods\":{\"WETH_TOKEN()\":{\"notice\":\"============ Immutable storage ============\"},\"allowancesSigner()\":{\"notice\":\"Helper to know allowancesSigner address\"},\"availableSupply()\":{\"notice\":\"Track current supply of available NFTs\"},\"buildMessages(uint256)\":{\"notice\":\"Helper that returns minter => tokenId data for signing\"},\"clearRaffle()\":{\"notice\":\"Clear a tranche by shuffling all entries.\"},\"createMessage(address,uint256)\":{\"notice\":\"Helper that creates the message that signer needs to sign to allow a mint         this is usually also used when creating the allowances, to ensure \\\"message\\\"         is the same\"},\"currentRaffle()\":{\"notice\":\"============ Mutable storage ============Track current raffle tranche\"},\"devMintMultiple(address[],address[],address[])\":{\"notice\":\"============ Admin Functions ============\"},\"enterRaffle(uint256)\":{\"notice\":\"Enters raffle by burning Mint Pass\"},\"raffleStartTime()\":{\"notice\":\"Timestamp for opening raffle 1\"},\"setClearingEntropy()\":{\"notice\":\"Sets entropy to prepare for clearing via shuffle\"},\"trancheEntropy(uint256)\":{\"notice\":\"Entropies per tranche from Chainlink VRF\"},\"trancheOffset(uint256)\":{\"notice\":\"Track tokenId offset for tranches\"},\"trancheRaffleEntries(uint256,uint256)\":{\"notice\":\"Array of raffle entries per tranche\"},\"trancheShuffled(uint256)\":{\"notice\":\"Tranche shuffle status\"},\"validateSignature(address,uint256,bytes)\":{\"notice\":\"This function verifies that the current request is valid\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WinnerBelt/WinnerBelt.sol\":\"WinnerBelt\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/dev/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xbd52a0e8c4bf121c9527d2b890c49b4c6f25c8950165d67d74a51a75d441dfdb\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/dev/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"contracts/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    /// @notice ERC20 check balance of user\\n    function balanceOf(address user) external returns (uint256);\\n\\n    /// @notice ERC20 transfer tokens - requires approval\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice transfer tokens out\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x982b14990b881366a01e4828d3e213599592b21e76ed41e30ba8de1f4da15189\",\"license\":\"AGPL-3.0-only\"},\"contracts/Libraries/SignedAllowance.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title SignedAllowance\\n/// @author Simon Fremaux (@dievardump)\\ncontract SignedAllowance {\\n    using ECDSA for bytes32;\\n\\n    // list of already used allowances\\n    mapping(bytes32 => bool) public usedAllowances;\\n\\n    // address used to sign the allowances\\n    address private _allowancesSigner;\\n\\n    /// @notice Helper to know allowancesSigner address\\n    /// @return the allowance signer address\\n    function allowancesSigner() public view virtual returns (address) {\\n        return _allowancesSigner;\\n    }\\n\\n    /// @notice Helper that creates the message that signer needs to sign to allow a mint\\n    ///         this is usually also used when creating the allowances, to ensure \\\"message\\\"\\n    ///         is the same\\n    /// @param account the account to allow\\n    /// @param nonce the nonce\\n    /// @return the message to sign\\n    function createMessage(address account, uint256 nonce) public pure returns (bytes32) {\\n        return keccak256(abi.encode(account, nonce));\\n    }\\n\\n    /// @notice Helper that creates a list of messages that signer needs to sign to allow mintings\\n    /// @param accounts the accounts to allow\\n    /// @param nonces the corresponding nonces\\n    /// @return messages the messages to sign\\n    function createMessages(address[] memory accounts, uint256[] memory nonces)\\n        internal\\n        pure\\n        returns (bytes32[] memory messages)\\n    {\\n        require(accounts.length == nonces.length, \\\"!LENGTH_MISMATCH!\\\");\\n        messages = new bytes32[](accounts.length);\\n        for (uint256 i; i < accounts.length; i++) {\\n            messages[i] = createMessage(accounts[i], nonces[i]);\\n        }\\n    }\\n\\n    /// @notice This function verifies that the current request is valid\\n    /// @dev It ensures that _allowancesSigner signed a message containing (account, nonce, address(this))\\n    ///      and that this message was not already used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce associated to this allowance\\n    /// @param signature the signature by the allowance signer wallet\\n    /// @return the message to mark as used\\n    function validateSignature(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) public view returns (bytes32) {\\n        return _validateSignature(account, nonce, signature, allowancesSigner());\\n    }\\n\\n    /// @dev It ensures that signer signed a message containing (account, nonce, address(this))\\n    ///      and that this message was not already used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce associated to this allowance\\n    /// @param signature the signature by the allowance signer wallet\\n    /// @param signer the signer\\n    /// @return the message to mark as used\\n    function _validateSignature(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature,\\n        address signer\\n    ) internal view returns (bytes32) {\\n        bytes32 message = createMessage(account, nonce).toEthSignedMessageHash();\\n\\n        // verifies that the sha3(account, nonce) has been signed by signer\\n        require(message.recover(signature) == signer, \\\"!INVALID_SIGNATURE!\\\");\\n\\n        // verifies that the allowances was not already used\\n        require(usedAllowances[message] == false, \\\"!ALREADY_USED!\\\");\\n\\n        return message;\\n    }\\n\\n    /// @notice internal function that verifies an allowance and marks it as used\\n    ///         this function throws if signature is wrong or this nonce for this user has already been used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce\\n    /// @param signature the signature by the allowance wallet\\n    function _useAllowance(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) internal {\\n        bytes32 message = validateSignature(account, nonce, signature);\\n        usedAllowances[message] = true;\\n    }\\n\\n    /// @notice Allows to change the allowance signer. This can be used to revoke any signed allowance not already used\\n    /// @param newSigner the new signer address\\n    function _setAllowancesSigner(address newSigner) internal {\\n        _allowancesSigner = newSigner;\\n    }\\n}\\n\",\"keccak256\":\"0x71ccd0e803d7ea2378cde09f870ad4cd4d10c5e92eef615ded475c3c3b34b58d\",\"license\":\"MIT\"},\"contracts/WinnerBelt/WinnerBelt.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/dev/VRFConsumerBase.sol\\\";\\nimport \\\"../Interfaces/IERC20.sol\\\";\\nimport \\\"../Libraries/SignedAllowance.sol\\\";\\n\\ncontract WinnerBelt is ERC1155, Ownable, AccessControl, VRFConsumerBase, SignedAllowance {\\n    /// ============ Structs ============\\n\\n    /// @notice Used in allowance signing\\n    struct Signable {\\n        uint256 nonce;\\n        address minter;\\n        bytes32 message;\\n    }\\n\\n    /// ============ Immutable storage ============\\n    IERC20 public WETH_TOKEN;\\n    IERC20 public immutable LINK_TOKEN;\\n    bytes32 internal immutable KEY_HASH;\\n    uint256 internal LINK_FEE;\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    uint256 public constant TRANCHE_LENGTH = 10 minutes;\\n    uint256 private constant PLATINUM = 0;\\n    uint256 private constant GOLD = 1;\\n    uint256 private constant SILVER = 2;\\n\\n    /// ============ Mutable storage ============\\n    /// @notice Track current raffle tranche\\n    uint256 public currentRaffle;\\n    /// @notice Track current supply of available NFTs\\n    uint256 public availableSupply;\\n    /// @notice Timestamp for opening raffle 1\\n    /// @dev Tranches will end at start time + TRANCHE_LENGTH * currentRaffle\\n    uint256 public raffleStartTime;\\n\\n    /// @notice Track tokenId offset for tranches\\n    /// @dev Each tranche shuffles entry indices.\\n    /// To calculate the tokenId, we sum trancheOfsset + shuffledEntryIndex\\n    mapping(uint256 => uint256) public trancheOffset;\\n    /// @notice Array of raffle entries per tranche\\n    mapping(uint256 => address[]) public trancheRaffleEntries;\\n    /// @notice Tranche shuffle status\\n    mapping(uint256 => bool) public trancheShuffled;\\n    /// @notice Entropies per tranche from Chainlink VRF\\n    mapping(uint256 => uint256) public trancheEntropy;\\n\\n    /// @notice map entry index to token id\\n    /// @dev 1-based\\n    mapping(uint256 => uint256) internal tokenMap;\\n    /// ============ Events ============\\n\\n    /// @notice Emitted after a successful raffle entry\\n    /// @param user Address of raffle participant\\n    /// @param currentRaffle Index of entry in raffleEntries\\n    event RaffleEntered(address indexed user, uint256 currentRaffle);\\n\\n    constructor(\\n        bytes32 _LINK_KEY_HASH,\\n        address _LINK_ADDRESS,\\n        address _LINK_VRF_COORDINATOR_ADDRESS,\\n        address _WETH_ADDRESS\\n    )\\n        ERC1155(\\\"ipfs://QmZ56WZVxUg9DwK3MzXeFZwKQ45f8XX8D7bpygh3LWXeZ5/{id}.json\\\")\\n        VRFConsumerBase(_LINK_VRF_COORDINATOR_ADDRESS, _LINK_ADDRESS)\\n    {\\n        // grant minter role to Rug Raffle etc.\\n        _setupRole(MINTER_ROLE, msg.sender);\\n        LINK_TOKEN = IERC20(_LINK_ADDRESS);\\n        WETH_TOKEN = IERC20(_WETH_ADDRESS);\\n        KEY_HASH = _LINK_KEY_HASH;\\n        LINK_FEE = 0.0001 * 10**18;\\n        trancheOffset[1] = 1;\\n    }\\n\\n    function mint(address to, uint256 tokenId) public payable onlyRole(MINTER_ROLE) {\\n        require(tokenId < 3, \\\"Invalid tokenId\\\");\\n        // can we ensure we dont mint more passes than NFTs available?\\n        // NFTs are minted on mainnet - we could pass an fxPortal message\\n        // on each mint to the draft vault wallet?\\n        ++availableSupply;\\n        _mint(to, tokenId, 1, \\\"\\\");\\n    }\\n\\n    function getTokenId(uint256 entryIndex) public view returns (uint256) {\\n        require(entryIndex < trancheOffset[currentRaffle], \\\"Entry not cleared\\\");\\n        return tokenMap[entryIndex];\\n    }\\n\\n    /// ============ User Functions ============\\n\\n    /// @notice Enters raffle by burning Mint Pass\\n    /// @param tokenId ERC1155 tokenId determines payment required\\n    function enterRaffle(uint256 tokenId) external {\\n        require(currentRaffle > 0, \\\"Raffle not active\\\");\\n\\n        // TODO: decide on payment. if we reveal the tokenId before payment,\\n        // a user might just decide not to mint. But getting paid on L2\\n        // stinks. Either $MATIC or we need to get xfer approval for wETH.\\n        // Many will be free?\\n        // bool success = WETH_TOKEN.transferFrom(msg.sender, address(this), 0.08 ether);\\n        // require(success, \\\"payment err\\\");\\n\\n        _burn(msg.sender, tokenId, 1);\\n\\n        trancheRaffleEntries[currentRaffle].push(msg.sender);\\n\\n        emit RaffleEntered(msg.sender, currentRaffle);\\n    }\\n\\n    /// ============ Admin Functions ============\\n\\n    function devMintMultiple(\\n        address[] calldata platinum,\\n        address[] calldata gold,\\n        address[] calldata silver\\n    ) external onlyOwner {\\n        uint256 pCount = platinum.length;\\n        uint256 gCount = gold.length;\\n        uint256 sCount = silver.length;\\n\\n        uint256 count = Math.max(pCount, Math.max(gCount, sCount));\\n\\n        for (uint256 index = 0; index < count; ) {\\n            if (index < pCount) {\\n                mint(platinum[index], PLATINUM);\\n            }\\n\\n            if (index < gCount) {\\n                mint(gold[index], GOLD);\\n            }\\n\\n            if (index < sCount) {\\n                mint(silver[index], SILVER);\\n            }\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets entropy to prepare for clearing via shuffle\\n    /// @dev VRF has a gas limit on callback which would cause\\n    /// clearing to fail in one tx.\\n    function setClearingEntropy() external {\\n        require(LINK_TOKEN.balanceOf(address(this)) >= LINK_FEE, \\\"Insufficient LINK\\\");\\n        require(block.timestamp > raffleEndTime(), \\\"Raffle still active\\\");\\n\\n        requestRandomness(KEY_HASH, LINK_FEE);\\n        currentRaffle += 1;\\n    }\\n\\n    /// @notice Clear a tranche by shuffling all entries.\\n    function clearRaffle() external {\\n        uint256 _currentRaffle = currentRaffle - 1;\\n        require(trancheEntropy[_currentRaffle] > 0, \\\"No entropy to clear raffle\\\");\\n        require(!trancheShuffled[_currentRaffle], \\\"Raffle has already been cleared\\\");\\n\\n        address[] storage raffleEntries = trancheRaffleEntries[_currentRaffle];\\n\\n        uint256 entryCount = raffleEntries.length;\\n        uint256 offset = trancheOffset[_currentRaffle];\\n        uint256 maxEntry = entryCount + offset;\\n        uint256 entropy = trancheEntropy[_currentRaffle];\\n\\n        // Run Fisher-Yates shuffle for tranche entries.\\n        // Every entry in the clearing tranche is\\n        // assigned a new index. The new index is used to\\n        // grant the address ability to mint NFT tokenId.\\n        for (uint256 entryIndex = offset; entryIndex < maxEntry; ) {\\n            // Generate a random available tokenId to swap from\\n            // will always be larger than an id set in tokenMap\\n            uint256 randomTokenId = entryIndex + (entropy % (availableSupply - entryIndex));\\n\\n            // Collect the value at that random index if it's been swapped to\\n            // Otherwise use the unseen tokenId\\n            uint256 randomTmp = tokenMap[randomTokenId] > 0 ? tokenMap[randomTokenId] : randomTokenId;\\n\\n            // Swap the value at the current entry index to the random index\\n            // Ensures no gaps and uniqueness\\n            tokenMap[randomTokenId] = entryIndex;\\n\\n            // Assign the value from the random index to the current, unseen index\\n            tokenMap[entryIndex] = randomTmp;\\n\\n            ++entryIndex;\\n        }\\n        trancheShuffled[_currentRaffle] = true;\\n        // Update the next (current) tranche's offset to maintain tokenId sequencing\\n        trancheOffset[currentRaffle] = trancheOffset[_currentRaffle] + entryCount;\\n        availableSupply -= entryCount;\\n    }\\n\\n    /// @notice Fulfills randomness from Chainlink VRF\\n    /// @param randomness random number from VRF\\n    function fulfillRandomness(bytes32, uint256 randomness) internal override {\\n        require(trancheEntropy[currentRaffle - 1] == 0, \\\"Entropy already set\\\");\\n        trancheEntropy[currentRaffle - 1] = randomness;\\n    }\\n\\n    function raffleEndTime() public view returns (uint256) {\\n        return raffleStartTime + (currentRaffle * TRANCHE_LENGTH);\\n    }\\n\\n    function openRaffle(uint256 timestamp) public onlyOwner {\\n        require(currentRaffle == 0, \\\"Raffle already started\\\");\\n        raffleStartTime = timestamp;\\n        currentRaffle = 1;\\n    }\\n\\n    function addSupply(uint256 newSupply) public onlyOwner {\\n        availableSupply += newSupply;\\n    }\\n\\n    /// @notice Helper that returns minter => tokenId data for signing\\n    /// @param raffle the raffle tranche\\n    /// @return signables messages for signing and the data encoded in each message\\n    /// @dev Each message is signed off-chain and provided to a dApp alongside the\\n    /// encoded data. Minters can submit the data and signature to the L1 NFT contract\\n    /// to mint their assigned token.\\n    function buildMessages(uint256 raffle) external view returns (Signable[] memory signables) {\\n        require(trancheShuffled[raffle], \\\"Raffle has not been cleared\\\");\\n        uint256 offset = trancheOffset[raffle];\\n        uint256 count = trancheRaffleEntries[raffle].length;\\n\\n        signables = new Signable[](count);\\n\\n        for (uint256 index = 0; index < count; index++) {\\n            address account = trancheRaffleEntries[raffle][index];\\n            signables[index] = Signable({\\n                message: createMessage(account, tokenMap[index + offset]),\\n                nonce: tokenMap[index + offset],\\n                minter: account\\n            });\\n        }\\n    }\\n\\n    function withdrawErc20(IERC20 token) external onlyOwner {\\n        require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"Transfer failed\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(AccessControl, ERC1155) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\\n// ENTERED\\n// 0x0090720FeD7Fed66eD658118b7B3BB0189D3A495\\n// 0xc102f76973f4890cab1b5d1ed26f3623381983af\\n// 0xc0f5b93bb77271d9ce898d08013f4958d1478534\\n// 0xc0f5b93bb77271d9ce898d08013f4958d1478534\\n// 0xc969434d478d62ed71cc6e24de34636f6a7a35dd\\n\",\"keccak256\":\"0x916dbcbd362c9f58c8099e2f410b946f8cd288c6fd9b96ba88245c543cf66dc9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162003c2638038062003c268339810160408190526200003591620002e7565b81836040518060600160405280603f815260200162003be7603f91396200005c816200010c565b50620000683362000125565b6001600160a01b0391821660a05216608052620000a67f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000177565b6001600160a01b0392831660c052600880546001600160a01b03191691909316179091555060e052655af3107a400060095560016000819052600d6020527ffd54ff1ed53f34a900b24c5ba64f85761163b5d82d98a47b9bd80e45466993c55562000378565b80516200012190600290602084019062000224565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008281526004602090815260408083206001600160a01b038516845290915290205462000121908390839060ff16620001215760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001e03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b82805462000232906200033b565b90600052602060002090601f016020900481019282620002565760008555620002a1565b82601f106200027157805160ff1916838001178555620002a1565b82800160010185558215620002a1579182015b82811115620002a157825182559160200191906001019062000284565b50620002af929150620002b3565b5090565b5b80821115620002af5760008155600101620002b4565b80516001600160a01b0381168114620002e257600080fd5b919050565b60008060008060808587031215620002fe57600080fd5b845193506200031060208601620002ca565b92506200032060408601620002ca565b91506200033060608601620002ca565b905092959194509250565b600181811c908216806200035057607f821691505b602082108114156200037257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051613827620003c060003960006118ca0152600081816107e301526117b30152600081816110e7015261236b0152600061233c01526138276000f3fe6080604052600436106102665760003560e01c80637ecc2b5611610144578063d5391393116100b6578063ed2695c11161007a578063ed2695c1146107b1578063eedac3a6146107d1578063f242432a14610805578063f2fde38b14610825578063f35eee8d14610845578063feff19991461085a57600080fd5b8063d5391393146106de578063d547741f14610712578063ded275d114610732578063e7e8665c14610752578063e985e9c51461076857600080fd5b806394985ddd1161010857806394985ddd1461063e578063a217fddf1461065e578063a22cb46514610673578063a8527cbe14610693578063ae927aac146106a9578063c7e42b1b146106be57600080fd5b80637ecc2b56146105ac5780638838b5c3146105c2578063890621da146105e05780638da5cb5b1461060057806391d148541461061e57600080fd5b806336568abe116101dd57806340c10f19116101a157806340c10f19146104cd5780634e1273f4146104e05780635e94f85b1461050d5780636ce0eaf31461053a578063715018a61461056757806379783ddf1461057c57600080fd5b806336568abe1461042a5780633704d10e1461044a57806337d277d4146104775780633be539ee1461049757806340753a76146104ad57600080fd5b806318a32e701161022f57806318a32e7014610353578063195e870814610368578063248a9ca3146103985780632e519f90146103c85780632eb2c2d6146103ea5780632f2ff15d1461040a57600080fd5b8062fdd58e1461026b57806301ffc9a71461029e5780630312c0f5146102ce5780630e89341c1461030657806314ff5ea314610333575b600080fd5b34801561027757600080fd5b5061028b610286366004612c9b565b61087a565b6040519081526020015b60405180910390f35b3480156102aa57600080fd5b506102be6102b9366004612cdd565b610911565b6040519015158152602001610295565b3480156102da57600080fd5b506102ee6102e9366004612cfa565b610922565b6040516001600160a01b039091168152602001610295565b34801561031257600080fd5b50610326610321366004612d1c565b61095a565b6040516102959190612d91565b34801561033f57600080fd5b5061028b61034e366004612d1c565b6109ee565b34801561035f57600080fd5b5061028b610a55565b34801561037457600080fd5b506102be610383366004612d1c565b60066020526000908152604090205460ff1681565b3480156103a457600080fd5b5061028b6103b3366004612d1c565b60009081526004602052604090206001015490565b3480156103d457600080fd5b506103e86103e3366004612d1c565b610a79565b005b3480156103f657600080fd5b506103e8610405366004612eed565b610b41565b34801561041657600080fd5b506103e8610425366004612f9a565b610bd8565b34801561043657600080fd5b506103e8610445366004612f9a565b610c03565b34801561045657600080fd5b5061046a610465366004612d1c565b610c81565b6040516102959190612fca565b34801561048357600080fd5b506008546102ee906001600160a01b031681565b3480156104a357600080fd5b5061028b600c5481565b3480156104b957600080fd5b506103e86104c8366004612d1c565b610e48565b6103e86104db366004612c9b565b610e8c565b3480156104ec57600080fd5b506105006104fb36600461302c565b610f2b565b6040516102959190613133565b34801561051957600080fd5b5061028b610528366004612d1c565b60106020526000908152604090205481565b34801561054657600080fd5b5061028b610555366004612d1c565b600d6020526000908152604090205481565b34801561057357600080fd5b506103e8611054565b34801561058857600080fd5b506102be610597366004612d1c565b600f6020526000908152604090205460ff1681565b3480156105b857600080fd5b5061028b600b5481565b3480156105ce57600080fd5b506007546001600160a01b03166102ee565b3480156105ec57600080fd5b5061028b6105fb366004613146565b61108a565b34801561060c57600080fd5b506003546001600160a01b03166102ee565b34801561062a57600080fd5b506102be610639366004612f9a565b6110b1565b34801561064a57600080fd5b506103e8610659366004612cfa565b6110dc565b34801561066a57600080fd5b5061028b600081565b34801561067f57600080fd5b506103e861068e3660046131ac565b61115e565b34801561069f57600080fd5b5061028b600a5481565b3480156106b557600080fd5b506103e8611169565b3480156106ca57600080fd5b506103e86106d93660046131da565b61135e565b3480156106ea57600080fd5b5061028b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561071e57600080fd5b506103e861072d366004612f9a565b6114ca565b34801561073e57600080fd5b506103e861074d366004612d1c565b6114f0565b34801561075e57600080fd5b5061028b61025881565b34801561077457600080fd5b506102be6107833660046131f7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156107bd57600080fd5b506103e86107cc366004613269565b61156d565b3480156107dd57600080fd5b506102ee7f000000000000000000000000000000000000000000000000000000000000000081565b34801561081157600080fd5b506103e8610820366004613302565b61167c565b34801561083157600080fd5b506103e86108403660046131da565b611703565b34801561085157600080fd5b506103e861179b565b34801561086657600080fd5b5061028b610875366004612c9b565b61190c565b60006001600160a01b0383166108eb5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b600061091c8261194a565b92915050565b600e602052816000526040600020818154811061093e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6060600280546109699061336a565b80601f01602080910402602001604051908101604052809291908181526020018280546109959061336a565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b50505050509050919050565b600a546000908152600d60205260408120548210610a425760405162461bcd60e51b8152602060048201526011602482015270115b9d1c9e481b9bdd0818db19585c9959607a1b60448201526064016108e2565b5060009081526011602052604090205490565b6000610258600a54610a6791906133bb565b600c54610a7491906133da565b905090565b6000600a5411610abf5760405162461bcd60e51b8152602060048201526011602482015270526166666c65206e6f742061637469766560781b60448201526064016108e2565b610acb3382600161196f565b600a80546000908152600e602090815260408083208054600181018255908452919092200180546001600160a01b03191633908117909155915490517fff4d34328021c85af2588171c713c19cada0a8acdc20dc117479fcd07865e62691610b369190815260200190565b60405180910390a250565b6001600160a01b038516331480610b5d5750610b5d8533610783565b610bc45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016108e2565b610bd18585858585611ae9565b5050505050565b600082815260046020526040902060010154610bf48133611cc6565b610bfe8383611d2a565b505050565b6001600160a01b0381163314610c735760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108e2565b610c7d8282611db0565b5050565b6000818152600f602052604090205460609060ff16610ce25760405162461bcd60e51b815260206004820152601b60248201527f526166666c6520686173206e6f74206265656e20636c6561726564000000000060448201526064016108e2565b6000828152600d6020908152604080832054600e90925290912054806001600160401b03811115610d1557610d15612da4565b604051908082528060200260200182016040528015610d6057816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610d335790505b50925060005b81811015610e40576000858152600e60205260408120805483908110610d8e57610d8e6133f2565b600091825260208220015460408051606081019091526001600160a01b039091169250908190601190610dc188876133da565b8152602001908152602001600020548152602001826001600160a01b03168152602001610e0c83601160008988610df891906133da565b81526020019081526020016000205461190c565b815250858381518110610e2157610e216133f2565b6020026020010181905250508080610e3890613408565b915050610d66565b505050919050565b6003546001600160a01b03163314610e725760405162461bcd60e51b81526004016108e290613423565b80600b6000828254610e8491906133da565b909155505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610eb78133611cc6565b60038210610ef95760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b60448201526064016108e2565b600b60008154610f0890613408565b91905081905550610bfe8383600160405180602001604052806000815250611e17565b60608151835114610f905760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016108e2565b600083516001600160401b03811115610fab57610fab612da4565b604051908082528060200260200182016040528015610fd4578160200160208202803683370190505b50905060005b845181101561104c5761101f858281518110610ff857610ff86133f2565b6020026020010151858381518110611012576110126133f2565b602002602001015161087a565b828281518110611031576110316133f2565b602090810291909101015261104581613408565b9050610fda565b509392505050565b6003546001600160a01b0316331461107e5760405162461bcd60e51b81526004016108e290613423565b6110886000611f21565b565b60006110a98484846110a46007546001600160a01b031690565b611f73565b949350505050565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111545760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0060448201526064016108e2565b610c7d8282612091565b610c7d338383612121565b60006001600a5461117a9190613458565b6000818152601060205260409020549091506111d85760405162461bcd60e51b815260206004820152601a60248201527f4e6f20656e74726f707920746f20636c65617220726166666c6500000000000060448201526064016108e2565b6000818152600f602052604090205460ff16156112375760405162461bcd60e51b815260206004820152601f60248201527f526166666c652068617320616c7265616479206265656e20636c65617265640060448201526064016108e2565b6000818152600e602090815260408083208054600d90935290832054909261125f82846133da565b600086815260106020526040902054909150825b828110156112fa57600081600b5461128b9190613458565b611295908461346f565b61129f90836133da565b600081815260116020526040812054919250906112bc57816112cc565b6000828152601160205260409020545b600083815260116020526040808220869055858252902081905590506112f183613408565b92505050611273565b506000868152600f60209081526040808320805460ff19166001179055600d90915290205461132a9085906133da565b600a546000908152600d6020526040812091909155600b8054869290611351908490613458565b9091555050505050505050565b6003546001600160a01b031633146113885760405162461bcd60e51b81526004016108e290613423565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381600087803b1580156113d357600080fd5b505af11580156113e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140b9190613491565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561145157600080fd5b505af1158015611465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148991906134aa565b6114c75760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016108e2565b50565b6000828152600460205260409020600101546114e68133611cc6565b610bfe8383611db0565b6003546001600160a01b0316331461151a5760405162461bcd60e51b81526004016108e290613423565b600a54156115635760405162461bcd60e51b8152602060048201526016602482015275149859999b1948185b1c9958591e481cdd185c9d195960521b60448201526064016108e2565b600c556001600a55565b6003546001600160a01b031633146115975760405162461bcd60e51b81526004016108e290613423565b84838260006115af846115aa8585612202565b612202565b905060005b8181101561166f57848110156115f5576115f58b8b838181106115d9576115d96133f2565b90506020020160208101906115ee91906131da565b6000610e8c565b8381101561162e5761162e898983818110611612576116126133f2565b905060200201602081019061162791906131da565b6001610e8c565b828110156116675761166787878381811061164b5761164b6133f2565b905060200201602081019061166091906131da565b6002610e8c565b6001016115b4565b5050505050505050505050565b6001600160a01b03851633148061169857506116988533610783565b6116f65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016108e2565b610bd1858585858561221b565b6003546001600160a01b0316331461172d5760405162461bcd60e51b81526004016108e290613423565b6001600160a01b0381166117925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108e2565b6114c781611f21565b6009546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381600087803b1580156117ff57600080fd5b505af1158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190613491565b10156118795760405162461bcd60e51b8152602060048201526011602482015270496e73756666696369656e74204c494e4b60781b60448201526064016108e2565b611881610a55565b42116118c55760405162461bcd60e51b8152602060048201526013602482015272526166666c65207374696c6c2061637469766560681b60448201526064016108e2565b6118f17f0000000000000000000000000000000000000000000000000000000000000000600954612338565b506001600a600082825461190591906133da565b9091555050565b604080516001600160a01b03841660208201529081018290526000906060015b60405160208183030381529060405280519060200120905092915050565b60006001600160e01b03198216637965db0b60e01b148061091c575061091c8261249c565b6001600160a01b0383166119d15760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016108e2565b33611a01818560006119e2876124ec565b6119eb876124ec565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b038816845290915290205482811015611a7e5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016108e2565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b8151835114611b4b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108e2565b6001600160a01b038416611b715760405162461bcd60e51b81526004016108e2906134c7565b3360005b8451811015611c58576000858281518110611b9257611b926133f2565b602002602001015190506000858381518110611bb057611bb06133f2565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611c005760405162461bcd60e51b81526004016108e29061350c565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611c3d9084906133da565b9250508190555050505080611c5190613408565b9050611b75565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ca8929190613556565b60405180910390a4611cbe818787878787612537565b505050505050565b611cd082826110b1565b610c7d57611ce8816001600160a01b031660146126a2565b611cf38360206126a2565b604051602001611d0492919061357b565b60408051601f198184030181529082905262461bcd60e51b82526108e291600401612d91565b611d3482826110b1565b610c7d5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d6c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611dba82826110b1565b15610c7d5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038416611e775760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016108e2565b33611e9181600087611e88886124ec565b610bd1886124ec565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611ec19084906133da565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610bd18160008787878761283d565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080611fd6611f83878761190c565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506001600160a01b038316611fec8286612907565b6001600160a01b0316146120385760405162461bcd60e51b815260206004820152601360248201527221494e56414c49445f5349474e41545552452160681b60448201526064016108e2565b60008181526006602052604090205460ff16156120885760405162461bcd60e51b815260206004820152600e60248201526d21414c52454144595f555345442160901b60448201526064016108e2565b95945050505050565b601060006001600a546120a49190613458565b8152602001908152602001600020546000146120f85760405162461bcd60e51b8152602060048201526013602482015272115b9d1c9bdc1e48185b1c9958591e481cd95d606a1b60448201526064016108e2565b80601060006001600a5461210c9190613458565b81526020810191909152604001600020555050565b816001600160a01b0316836001600160a01b031614156121955760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016108e2565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818310156122125781612214565b825b9392505050565b6001600160a01b0384166122415760405162461bcd60e51b81526004016108e2906134c7565b33612251818787611e88886124ec565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156122925760405162461bcd60e51b81526004016108e29061350c565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906122cf9084906133da565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461232f82888888888861283d565b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016123a8929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016123d5939291906135f0565b602060405180830381600087803b1580156123ef57600080fd5b505af1158015612403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242791906134aa565b50600083815260056020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a0909101909252815191830191909120938790529190526124839060016133da565b6000858152600560205260409020556110a98482612923565b60006001600160e01b03198216636cdb3d1360e11b14806124cd57506001600160e01b031982166303a24d0760e21b145b8061091c57506301ffc9a760e01b6001600160e01b031983161461091c565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612526576125266133f2565b602090810291909101015292915050565b6001600160a01b0384163b15611cbe5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061257b9089908990889088908890600401613617565b602060405180830381600087803b15801561259557600080fd5b505af19250505080156125c5575060408051601f3d908101601f191682019092526125c291810190613675565b60015b612672576125d1613692565b806308c379a0141561260b57506125e66136ae565b806125f1575061260d565b8060405162461bcd60e51b81526004016108e29190612d91565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016108e2565b6001600160e01b0319811663bc197c8160e01b1461232f5760405162461bcd60e51b81526004016108e290613737565b606060006126b18360026133bb565b6126bc9060026133da565b6001600160401b038111156126d3576126d3612da4565b6040519080825280601f01601f1916602001820160405280156126fd576020820181803683370190505b509050600360fc1b81600081518110612718576127186133f2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612747576127476133f2565b60200101906001600160f81b031916908160001a905350600061276b8460026133bb565b6127769060016133da565b90505b60018111156127ee576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106127aa576127aa6133f2565b1a60f81b8282815181106127c0576127c06133f2565b60200101906001600160f81b031916908160001a90535060049490941c936127e78161377f565b9050612779565b5083156122145760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108e2565b6001600160a01b0384163b15611cbe5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906128819089908990889088908890600401613796565b602060405180830381600087803b15801561289b57600080fd5b505af19250505080156128cb575060408051601f3d908101601f191682019092526128c891810190613675565b60015b6128d7576125d1613692565b6001600160e01b0319811663f23a6e6160e01b1461232f5760405162461bcd60e51b81526004016108e290613737565b6000806000612916858561293f565b9150915061104c816129af565b604080516020810184905290810182905260009060600161192c565b6000808251604114156129765760208301516040840151606085015160001a61296a87828585612b6a565b945094505050506129a8565b8251604014156129a05760208301516040840151612995868383612c57565b9350935050506129a8565b506000905060025b9250929050565b60008160048111156129c3576129c36137db565b14156129cc5750565b60018160048111156129e0576129e06137db565b1415612a2e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016108e2565b6002816004811115612a4257612a426137db565b1415612a905760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016108e2565b6003816004811115612aa457612aa46137db565b1415612afd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016108e2565b6004816004811115612b1157612b116137db565b14156114c75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016108e2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612ba15750600090506003612c4e565b8460ff16601b14158015612bb957508460ff16601c14155b15612bca5750600090506004612c4e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612c1e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612c4757600060019250925050612c4e565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01612c7887828885612b6a565b935093505050935093915050565b6001600160a01b03811681146114c757600080fd5b60008060408385031215612cae57600080fd5b8235612cb981612c86565b946020939093013593505050565b6001600160e01b0319811681146114c757600080fd5b600060208284031215612cef57600080fd5b813561221481612cc7565b60008060408385031215612d0d57600080fd5b50508035926020909101359150565b600060208284031215612d2e57600080fd5b5035919050565b60005b83811015612d50578181015183820152602001612d38565b83811115612d5f576000848401525b50505050565b60008151808452612d7d816020860160208601612d35565b601f01601f19169290920160200192915050565b6020815260006122146020830184612d65565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612ddf57612ddf612da4565b6040525050565b60006001600160401b03821115612dff57612dff612da4565b5060051b60200190565b600082601f830112612e1a57600080fd5b81356020612e2782612de6565b604051612e348282612dba565b83815260059390931b8501820192828101915086841115612e5457600080fd5b8286015b84811015612e6f5780358352918301918301612e58565b509695505050505050565b600082601f830112612e8b57600080fd5b81356001600160401b03811115612ea457612ea4612da4565b604051612ebb601f8301601f191660200182612dba565b818152846020838601011115612ed057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612f0557600080fd5b8535612f1081612c86565b94506020860135612f2081612c86565b935060408601356001600160401b0380821115612f3c57600080fd5b612f4889838a01612e09565b94506060880135915080821115612f5e57600080fd5b612f6a89838a01612e09565b93506080880135915080821115612f8057600080fd5b50612f8d88828901612e7a565b9150509295509295909350565b60008060408385031215612fad57600080fd5b823591506020830135612fbf81612c86565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561301f57815180518552868101516001600160a01b0316878601528501518585015260609093019290850190600101612fe7565b5091979650505050505050565b6000806040838503121561303f57600080fd5b82356001600160401b038082111561305657600080fd5b818501915085601f83011261306a57600080fd5b8135602061307782612de6565b6040516130848282612dba565b83815260059390931b85018201928281019150898411156130a457600080fd5b948201945b838610156130cb5785356130bc81612c86565b825294820194908201906130a9565b965050860135925050808211156130e157600080fd5b506130ee85828601612e09565b9150509250929050565b600081518084526020808501945080840160005b838110156131285781518752958201959082019060010161310c565b509495945050505050565b60208152600061221460208301846130f8565b60008060006060848603121561315b57600080fd5b833561316681612c86565b92506020840135915060408401356001600160401b0381111561318857600080fd5b61319486828701612e7a565b9150509250925092565b80151581146114c757600080fd5b600080604083850312156131bf57600080fd5b82356131ca81612c86565b91506020830135612fbf8161319e565b6000602082840312156131ec57600080fd5b813561221481612c86565b6000806040838503121561320a57600080fd5b823561321581612c86565b91506020830135612fbf81612c86565b60008083601f84011261323757600080fd5b5081356001600160401b0381111561324e57600080fd5b6020830191508360208260051b85010111156129a857600080fd5b6000806000806000806060878903121561328257600080fd5b86356001600160401b038082111561329957600080fd5b6132a58a838b01613225565b909850965060208901359150808211156132be57600080fd5b6132ca8a838b01613225565b909650945060408901359150808211156132e357600080fd5b506132f089828a01613225565b979a9699509497509295939492505050565b600080600080600060a0868803121561331a57600080fd5b853561332581612c86565b9450602086013561333581612c86565b9350604086013592506060860135915060808601356001600160401b0381111561335e57600080fd5b612f8d88828901612e7a565b600181811c9082168061337e57607f821691505b6020821081141561339f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156133d5576133d56133a5565b500290565b600082198211156133ed576133ed6133a5565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561341c5761341c6133a5565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561346a5761346a6133a5565b500390565b60008261348c57634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156134a357600080fd5b5051919050565b6000602082840312156134bc57600080fd5b81516122148161319e565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061356960408301856130f8565b828103602084015261208881856130f8565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516135b3816017850160208801612d35565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516135e4816028840160208801612d35565b01602801949350505050565b60018060a01b03841681528260208201526060604082015260006120886060830184612d65565b6001600160a01b0386811682528516602082015260a060408201819052600090613643908301866130f8565b828103606084015261365581866130f8565b905082810360808401526136698185612d65565b98975050505050505050565b60006020828403121561368757600080fd5b815161221481612cc7565b600060033d11156136ab5760046000803e5060005160e01c5b90565b600060443d10156136bc5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156136eb57505050505090565b82850191508151818111156137035750505050505090565b843d870101602082850101111561371d5750505050505090565b61372c60208286010187612dba565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60008161378e5761378e6133a5565b506000190190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906137d090830184612d65565b979650505050505050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220e2a5602e870502bb0a83047896465e1720e2031567b7f50e9851bc1293fbc97964736f6c63430008090033697066733a2f2f516d5a3536575a567855673944774b334d7a5865465a774b513435663858583844376270796768334c5758655a352f7b69647d2e6a736f6e",
  "deployedBytecode": "0x6080604052600436106102665760003560e01c80637ecc2b5611610144578063d5391393116100b6578063ed2695c11161007a578063ed2695c1146107b1578063eedac3a6146107d1578063f242432a14610805578063f2fde38b14610825578063f35eee8d14610845578063feff19991461085a57600080fd5b8063d5391393146106de578063d547741f14610712578063ded275d114610732578063e7e8665c14610752578063e985e9c51461076857600080fd5b806394985ddd1161010857806394985ddd1461063e578063a217fddf1461065e578063a22cb46514610673578063a8527cbe14610693578063ae927aac146106a9578063c7e42b1b146106be57600080fd5b80637ecc2b56146105ac5780638838b5c3146105c2578063890621da146105e05780638da5cb5b1461060057806391d148541461061e57600080fd5b806336568abe116101dd57806340c10f19116101a157806340c10f19146104cd5780634e1273f4146104e05780635e94f85b1461050d5780636ce0eaf31461053a578063715018a61461056757806379783ddf1461057c57600080fd5b806336568abe1461042a5780633704d10e1461044a57806337d277d4146104775780633be539ee1461049757806340753a76146104ad57600080fd5b806318a32e701161022f57806318a32e7014610353578063195e870814610368578063248a9ca3146103985780632e519f90146103c85780632eb2c2d6146103ea5780632f2ff15d1461040a57600080fd5b8062fdd58e1461026b57806301ffc9a71461029e5780630312c0f5146102ce5780630e89341c1461030657806314ff5ea314610333575b600080fd5b34801561027757600080fd5b5061028b610286366004612c9b565b61087a565b6040519081526020015b60405180910390f35b3480156102aa57600080fd5b506102be6102b9366004612cdd565b610911565b6040519015158152602001610295565b3480156102da57600080fd5b506102ee6102e9366004612cfa565b610922565b6040516001600160a01b039091168152602001610295565b34801561031257600080fd5b50610326610321366004612d1c565b61095a565b6040516102959190612d91565b34801561033f57600080fd5b5061028b61034e366004612d1c565b6109ee565b34801561035f57600080fd5b5061028b610a55565b34801561037457600080fd5b506102be610383366004612d1c565b60066020526000908152604090205460ff1681565b3480156103a457600080fd5b5061028b6103b3366004612d1c565b60009081526004602052604090206001015490565b3480156103d457600080fd5b506103e86103e3366004612d1c565b610a79565b005b3480156103f657600080fd5b506103e8610405366004612eed565b610b41565b34801561041657600080fd5b506103e8610425366004612f9a565b610bd8565b34801561043657600080fd5b506103e8610445366004612f9a565b610c03565b34801561045657600080fd5b5061046a610465366004612d1c565b610c81565b6040516102959190612fca565b34801561048357600080fd5b506008546102ee906001600160a01b031681565b3480156104a357600080fd5b5061028b600c5481565b3480156104b957600080fd5b506103e86104c8366004612d1c565b610e48565b6103e86104db366004612c9b565b610e8c565b3480156104ec57600080fd5b506105006104fb36600461302c565b610f2b565b6040516102959190613133565b34801561051957600080fd5b5061028b610528366004612d1c565b60106020526000908152604090205481565b34801561054657600080fd5b5061028b610555366004612d1c565b600d6020526000908152604090205481565b34801561057357600080fd5b506103e8611054565b34801561058857600080fd5b506102be610597366004612d1c565b600f6020526000908152604090205460ff1681565b3480156105b857600080fd5b5061028b600b5481565b3480156105ce57600080fd5b506007546001600160a01b03166102ee565b3480156105ec57600080fd5b5061028b6105fb366004613146565b61108a565b34801561060c57600080fd5b506003546001600160a01b03166102ee565b34801561062a57600080fd5b506102be610639366004612f9a565b6110b1565b34801561064a57600080fd5b506103e8610659366004612cfa565b6110dc565b34801561066a57600080fd5b5061028b600081565b34801561067f57600080fd5b506103e861068e3660046131ac565b61115e565b34801561069f57600080fd5b5061028b600a5481565b3480156106b557600080fd5b506103e8611169565b3480156106ca57600080fd5b506103e86106d93660046131da565b61135e565b3480156106ea57600080fd5b5061028b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561071e57600080fd5b506103e861072d366004612f9a565b6114ca565b34801561073e57600080fd5b506103e861074d366004612d1c565b6114f0565b34801561075e57600080fd5b5061028b61025881565b34801561077457600080fd5b506102be6107833660046131f7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156107bd57600080fd5b506103e86107cc366004613269565b61156d565b3480156107dd57600080fd5b506102ee7f000000000000000000000000000000000000000000000000000000000000000081565b34801561081157600080fd5b506103e8610820366004613302565b61167c565b34801561083157600080fd5b506103e86108403660046131da565b611703565b34801561085157600080fd5b506103e861179b565b34801561086657600080fd5b5061028b610875366004612c9b565b61190c565b60006001600160a01b0383166108eb5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b600061091c8261194a565b92915050565b600e602052816000526040600020818154811061093e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6060600280546109699061336a565b80601f01602080910402602001604051908101604052809291908181526020018280546109959061336a565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b50505050509050919050565b600a546000908152600d60205260408120548210610a425760405162461bcd60e51b8152602060048201526011602482015270115b9d1c9e481b9bdd0818db19585c9959607a1b60448201526064016108e2565b5060009081526011602052604090205490565b6000610258600a54610a6791906133bb565b600c54610a7491906133da565b905090565b6000600a5411610abf5760405162461bcd60e51b8152602060048201526011602482015270526166666c65206e6f742061637469766560781b60448201526064016108e2565b610acb3382600161196f565b600a80546000908152600e602090815260408083208054600181018255908452919092200180546001600160a01b03191633908117909155915490517fff4d34328021c85af2588171c713c19cada0a8acdc20dc117479fcd07865e62691610b369190815260200190565b60405180910390a250565b6001600160a01b038516331480610b5d5750610b5d8533610783565b610bc45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016108e2565b610bd18585858585611ae9565b5050505050565b600082815260046020526040902060010154610bf48133611cc6565b610bfe8383611d2a565b505050565b6001600160a01b0381163314610c735760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108e2565b610c7d8282611db0565b5050565b6000818152600f602052604090205460609060ff16610ce25760405162461bcd60e51b815260206004820152601b60248201527f526166666c6520686173206e6f74206265656e20636c6561726564000000000060448201526064016108e2565b6000828152600d6020908152604080832054600e90925290912054806001600160401b03811115610d1557610d15612da4565b604051908082528060200260200182016040528015610d6057816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610d335790505b50925060005b81811015610e40576000858152600e60205260408120805483908110610d8e57610d8e6133f2565b600091825260208220015460408051606081019091526001600160a01b039091169250908190601190610dc188876133da565b8152602001908152602001600020548152602001826001600160a01b03168152602001610e0c83601160008988610df891906133da565b81526020019081526020016000205461190c565b815250858381518110610e2157610e216133f2565b6020026020010181905250508080610e3890613408565b915050610d66565b505050919050565b6003546001600160a01b03163314610e725760405162461bcd60e51b81526004016108e290613423565b80600b6000828254610e8491906133da565b909155505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610eb78133611cc6565b60038210610ef95760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b60448201526064016108e2565b600b60008154610f0890613408565b91905081905550610bfe8383600160405180602001604052806000815250611e17565b60608151835114610f905760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016108e2565b600083516001600160401b03811115610fab57610fab612da4565b604051908082528060200260200182016040528015610fd4578160200160208202803683370190505b50905060005b845181101561104c5761101f858281518110610ff857610ff86133f2565b6020026020010151858381518110611012576110126133f2565b602002602001015161087a565b828281518110611031576110316133f2565b602090810291909101015261104581613408565b9050610fda565b509392505050565b6003546001600160a01b0316331461107e5760405162461bcd60e51b81526004016108e290613423565b6110886000611f21565b565b60006110a98484846110a46007546001600160a01b031690565b611f73565b949350505050565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111545760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0060448201526064016108e2565b610c7d8282612091565b610c7d338383612121565b60006001600a5461117a9190613458565b6000818152601060205260409020549091506111d85760405162461bcd60e51b815260206004820152601a60248201527f4e6f20656e74726f707920746f20636c65617220726166666c6500000000000060448201526064016108e2565b6000818152600f602052604090205460ff16156112375760405162461bcd60e51b815260206004820152601f60248201527f526166666c652068617320616c7265616479206265656e20636c65617265640060448201526064016108e2565b6000818152600e602090815260408083208054600d90935290832054909261125f82846133da565b600086815260106020526040902054909150825b828110156112fa57600081600b5461128b9190613458565b611295908461346f565b61129f90836133da565b600081815260116020526040812054919250906112bc57816112cc565b6000828152601160205260409020545b600083815260116020526040808220869055858252902081905590506112f183613408565b92505050611273565b506000868152600f60209081526040808320805460ff19166001179055600d90915290205461132a9085906133da565b600a546000908152600d6020526040812091909155600b8054869290611351908490613458565b9091555050505050505050565b6003546001600160a01b031633146113885760405162461bcd60e51b81526004016108e290613423565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381600087803b1580156113d357600080fd5b505af11580156113e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140b9190613491565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561145157600080fd5b505af1158015611465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148991906134aa565b6114c75760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016108e2565b50565b6000828152600460205260409020600101546114e68133611cc6565b610bfe8383611db0565b6003546001600160a01b0316331461151a5760405162461bcd60e51b81526004016108e290613423565b600a54156115635760405162461bcd60e51b8152602060048201526016602482015275149859999b1948185b1c9958591e481cdd185c9d195960521b60448201526064016108e2565b600c556001600a55565b6003546001600160a01b031633146115975760405162461bcd60e51b81526004016108e290613423565b84838260006115af846115aa8585612202565b612202565b905060005b8181101561166f57848110156115f5576115f58b8b838181106115d9576115d96133f2565b90506020020160208101906115ee91906131da565b6000610e8c565b8381101561162e5761162e898983818110611612576116126133f2565b905060200201602081019061162791906131da565b6001610e8c565b828110156116675761166787878381811061164b5761164b6133f2565b905060200201602081019061166091906131da565b6002610e8c565b6001016115b4565b5050505050505050505050565b6001600160a01b03851633148061169857506116988533610783565b6116f65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016108e2565b610bd1858585858561221b565b6003546001600160a01b0316331461172d5760405162461bcd60e51b81526004016108e290613423565b6001600160a01b0381166117925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108e2565b6114c781611f21565b6009546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381600087803b1580156117ff57600080fd5b505af1158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190613491565b10156118795760405162461bcd60e51b8152602060048201526011602482015270496e73756666696369656e74204c494e4b60781b60448201526064016108e2565b611881610a55565b42116118c55760405162461bcd60e51b8152602060048201526013602482015272526166666c65207374696c6c2061637469766560681b60448201526064016108e2565b6118f17f0000000000000000000000000000000000000000000000000000000000000000600954612338565b506001600a600082825461190591906133da565b9091555050565b604080516001600160a01b03841660208201529081018290526000906060015b60405160208183030381529060405280519060200120905092915050565b60006001600160e01b03198216637965db0b60e01b148061091c575061091c8261249c565b6001600160a01b0383166119d15760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016108e2565b33611a01818560006119e2876124ec565b6119eb876124ec565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b038816845290915290205482811015611a7e5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016108e2565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b8151835114611b4b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108e2565b6001600160a01b038416611b715760405162461bcd60e51b81526004016108e2906134c7565b3360005b8451811015611c58576000858281518110611b9257611b926133f2565b602002602001015190506000858381518110611bb057611bb06133f2565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611c005760405162461bcd60e51b81526004016108e29061350c565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611c3d9084906133da565b9250508190555050505080611c5190613408565b9050611b75565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ca8929190613556565b60405180910390a4611cbe818787878787612537565b505050505050565b611cd082826110b1565b610c7d57611ce8816001600160a01b031660146126a2565b611cf38360206126a2565b604051602001611d0492919061357b565b60408051601f198184030181529082905262461bcd60e51b82526108e291600401612d91565b611d3482826110b1565b610c7d5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d6c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611dba82826110b1565b15610c7d5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038416611e775760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016108e2565b33611e9181600087611e88886124ec565b610bd1886124ec565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611ec19084906133da565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610bd18160008787878761283d565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080611fd6611f83878761190c565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506001600160a01b038316611fec8286612907565b6001600160a01b0316146120385760405162461bcd60e51b815260206004820152601360248201527221494e56414c49445f5349474e41545552452160681b60448201526064016108e2565b60008181526006602052604090205460ff16156120885760405162461bcd60e51b815260206004820152600e60248201526d21414c52454144595f555345442160901b60448201526064016108e2565b95945050505050565b601060006001600a546120a49190613458565b8152602001908152602001600020546000146120f85760405162461bcd60e51b8152602060048201526013602482015272115b9d1c9bdc1e48185b1c9958591e481cd95d606a1b60448201526064016108e2565b80601060006001600a5461210c9190613458565b81526020810191909152604001600020555050565b816001600160a01b0316836001600160a01b031614156121955760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016108e2565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818310156122125781612214565b825b9392505050565b6001600160a01b0384166122415760405162461bcd60e51b81526004016108e2906134c7565b33612251818787611e88886124ec565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156122925760405162461bcd60e51b81526004016108e29061350c565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906122cf9084906133da565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461232f82888888888861283d565b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016123a8929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016123d5939291906135f0565b602060405180830381600087803b1580156123ef57600080fd5b505af1158015612403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242791906134aa565b50600083815260056020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a0909101909252815191830191909120938790529190526124839060016133da565b6000858152600560205260409020556110a98482612923565b60006001600160e01b03198216636cdb3d1360e11b14806124cd57506001600160e01b031982166303a24d0760e21b145b8061091c57506301ffc9a760e01b6001600160e01b031983161461091c565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612526576125266133f2565b602090810291909101015292915050565b6001600160a01b0384163b15611cbe5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061257b9089908990889088908890600401613617565b602060405180830381600087803b15801561259557600080fd5b505af19250505080156125c5575060408051601f3d908101601f191682019092526125c291810190613675565b60015b612672576125d1613692565b806308c379a0141561260b57506125e66136ae565b806125f1575061260d565b8060405162461bcd60e51b81526004016108e29190612d91565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016108e2565b6001600160e01b0319811663bc197c8160e01b1461232f5760405162461bcd60e51b81526004016108e290613737565b606060006126b18360026133bb565b6126bc9060026133da565b6001600160401b038111156126d3576126d3612da4565b6040519080825280601f01601f1916602001820160405280156126fd576020820181803683370190505b509050600360fc1b81600081518110612718576127186133f2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612747576127476133f2565b60200101906001600160f81b031916908160001a905350600061276b8460026133bb565b6127769060016133da565b90505b60018111156127ee576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106127aa576127aa6133f2565b1a60f81b8282815181106127c0576127c06133f2565b60200101906001600160f81b031916908160001a90535060049490941c936127e78161377f565b9050612779565b5083156122145760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108e2565b6001600160a01b0384163b15611cbe5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906128819089908990889088908890600401613796565b602060405180830381600087803b15801561289b57600080fd5b505af19250505080156128cb575060408051601f3d908101601f191682019092526128c891810190613675565b60015b6128d7576125d1613692565b6001600160e01b0319811663f23a6e6160e01b1461232f5760405162461bcd60e51b81526004016108e290613737565b6000806000612916858561293f565b9150915061104c816129af565b604080516020810184905290810182905260009060600161192c565b6000808251604114156129765760208301516040840151606085015160001a61296a87828585612b6a565b945094505050506129a8565b8251604014156129a05760208301516040840151612995868383612c57565b9350935050506129a8565b506000905060025b9250929050565b60008160048111156129c3576129c36137db565b14156129cc5750565b60018160048111156129e0576129e06137db565b1415612a2e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016108e2565b6002816004811115612a4257612a426137db565b1415612a905760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016108e2565b6003816004811115612aa457612aa46137db565b1415612afd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016108e2565b6004816004811115612b1157612b116137db565b14156114c75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016108e2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612ba15750600090506003612c4e565b8460ff16601b14158015612bb957508460ff16601c14155b15612bca5750600090506004612c4e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612c1e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612c4757600060019250925050612c4e565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01612c7887828885612b6a565b935093505050935093915050565b6001600160a01b03811681146114c757600080fd5b60008060408385031215612cae57600080fd5b8235612cb981612c86565b946020939093013593505050565b6001600160e01b0319811681146114c757600080fd5b600060208284031215612cef57600080fd5b813561221481612cc7565b60008060408385031215612d0d57600080fd5b50508035926020909101359150565b600060208284031215612d2e57600080fd5b5035919050565b60005b83811015612d50578181015183820152602001612d38565b83811115612d5f576000848401525b50505050565b60008151808452612d7d816020860160208601612d35565b601f01601f19169290920160200192915050565b6020815260006122146020830184612d65565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612ddf57612ddf612da4565b6040525050565b60006001600160401b03821115612dff57612dff612da4565b5060051b60200190565b600082601f830112612e1a57600080fd5b81356020612e2782612de6565b604051612e348282612dba565b83815260059390931b8501820192828101915086841115612e5457600080fd5b8286015b84811015612e6f5780358352918301918301612e58565b509695505050505050565b600082601f830112612e8b57600080fd5b81356001600160401b03811115612ea457612ea4612da4565b604051612ebb601f8301601f191660200182612dba565b818152846020838601011115612ed057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612f0557600080fd5b8535612f1081612c86565b94506020860135612f2081612c86565b935060408601356001600160401b0380821115612f3c57600080fd5b612f4889838a01612e09565b94506060880135915080821115612f5e57600080fd5b612f6a89838a01612e09565b93506080880135915080821115612f8057600080fd5b50612f8d88828901612e7a565b9150509295509295909350565b60008060408385031215612fad57600080fd5b823591506020830135612fbf81612c86565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561301f57815180518552868101516001600160a01b0316878601528501518585015260609093019290850190600101612fe7565b5091979650505050505050565b6000806040838503121561303f57600080fd5b82356001600160401b038082111561305657600080fd5b818501915085601f83011261306a57600080fd5b8135602061307782612de6565b6040516130848282612dba565b83815260059390931b85018201928281019150898411156130a457600080fd5b948201945b838610156130cb5785356130bc81612c86565b825294820194908201906130a9565b965050860135925050808211156130e157600080fd5b506130ee85828601612e09565b9150509250929050565b600081518084526020808501945080840160005b838110156131285781518752958201959082019060010161310c565b509495945050505050565b60208152600061221460208301846130f8565b60008060006060848603121561315b57600080fd5b833561316681612c86565b92506020840135915060408401356001600160401b0381111561318857600080fd5b61319486828701612e7a565b9150509250925092565b80151581146114c757600080fd5b600080604083850312156131bf57600080fd5b82356131ca81612c86565b91506020830135612fbf8161319e565b6000602082840312156131ec57600080fd5b813561221481612c86565b6000806040838503121561320a57600080fd5b823561321581612c86565b91506020830135612fbf81612c86565b60008083601f84011261323757600080fd5b5081356001600160401b0381111561324e57600080fd5b6020830191508360208260051b85010111156129a857600080fd5b6000806000806000806060878903121561328257600080fd5b86356001600160401b038082111561329957600080fd5b6132a58a838b01613225565b909850965060208901359150808211156132be57600080fd5b6132ca8a838b01613225565b909650945060408901359150808211156132e357600080fd5b506132f089828a01613225565b979a9699509497509295939492505050565b600080600080600060a0868803121561331a57600080fd5b853561332581612c86565b9450602086013561333581612c86565b9350604086013592506060860135915060808601356001600160401b0381111561335e57600080fd5b612f8d88828901612e7a565b600181811c9082168061337e57607f821691505b6020821081141561339f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156133d5576133d56133a5565b500290565b600082198211156133ed576133ed6133a5565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561341c5761341c6133a5565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561346a5761346a6133a5565b500390565b60008261348c57634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156134a357600080fd5b5051919050565b6000602082840312156134bc57600080fd5b81516122148161319e565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061356960408301856130f8565b828103602084015261208881856130f8565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516135b3816017850160208801612d35565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516135e4816028840160208801612d35565b01602801949350505050565b60018060a01b03841681528260208201526060604082015260006120886060830184612d65565b6001600160a01b0386811682528516602082015260a060408201819052600090613643908301866130f8565b828103606084015261365581866130f8565b905082810360808401526136698185612d65565b98975050505050505050565b60006020828403121561368757600080fd5b815161221481612cc7565b600060033d11156136ab5760046000803e5060005160e01c5b90565b600060443d10156136bc5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156136eb57505050505090565b82850191508151818111156137035750505050505090565b843d870101602082850101111561371d5750505050505090565b61372c60208286010187612dba565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60008161378e5761378e6133a5565b506000190190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906137d090830184612d65565b979650505050505050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220e2a5602e870502bb0a83047896465e1720e2031567b7f50e9851bc1293fbc97964736f6c63430008090033",
  "devdoc": {
    "events": {
      "RaffleEntered(address,uint256)": {
        "params": {
          "currentRaffle": "Index of entry in raffleEntries",
          "user": "Address of raffle participant"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowancesSigner()": {
        "returns": {
          "_0": "the allowance signer address"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "buildMessages(uint256)": {
        "details": "Each message is signed off-chain and provided to a dApp alongside the encoded data. Minters can submit the data and signature to the L1 NFT contract to mint their assigned token.",
        "params": {
          "raffle": "the raffle tranche"
        },
        "returns": {
          "signables": "messages for signing and the data encoded in each message"
        }
      },
      "createMessage(address,uint256)": {
        "params": {
          "account": "the account to allow",
          "nonce": "the nonce"
        },
        "returns": {
          "_0": "the message to sign"
        }
      },
      "enterRaffle(uint256)": {
        "params": {
          "tokenId": "ERC1155 tokenId determines payment required"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setClearingEntropy()": {
        "details": "VRF has a gas limit on callback which would cause clearing to fail in one tx."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      },
      "validateSignature(address,uint256,bytes)": {
        "details": "It ensures that _allowancesSigner signed a message containing (account, nonce, address(this))      and that this message was not already used",
        "params": {
          "account": "the account the allowance is associated to",
          "nonce": "the nonce associated to this allowance",
          "signature": "the signature by the allowance signer wallet"
        },
        "returns": {
          "_0": "the message to mark as used"
        }
      }
    },
    "stateVariables": {
      "raffleStartTime": {
        "details": "Tranches will end at start time + TRANCHE_LENGTH * currentRaffle"
      },
      "tokenMap": {
        "details": "1-based"
      },
      "trancheOffset": {
        "details": "Each tranche shuffles entry indices. To calculate the tokenId, we sum trancheOfsset + shuffledEntryIndex"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RaffleEntered(address,uint256)": {
        "notice": "Emitted after a successful raffle entry"
      }
    },
    "kind": "user",
    "methods": {
      "WETH_TOKEN()": {
        "notice": "============ Immutable storage ============"
      },
      "allowancesSigner()": {
        "notice": "Helper to know allowancesSigner address"
      },
      "availableSupply()": {
        "notice": "Track current supply of available NFTs"
      },
      "buildMessages(uint256)": {
        "notice": "Helper that returns minter => tokenId data for signing"
      },
      "clearRaffle()": {
        "notice": "Clear a tranche by shuffling all entries."
      },
      "createMessage(address,uint256)": {
        "notice": "Helper that creates the message that signer needs to sign to allow a mint         this is usually also used when creating the allowances, to ensure \"message\"         is the same"
      },
      "currentRaffle()": {
        "notice": "============ Mutable storage ============Track current raffle tranche"
      },
      "devMintMultiple(address[],address[],address[])": {
        "notice": "============ Admin Functions ============"
      },
      "enterRaffle(uint256)": {
        "notice": "Enters raffle by burning Mint Pass"
      },
      "raffleStartTime()": {
        "notice": "Timestamp for opening raffle 1"
      },
      "setClearingEntropy()": {
        "notice": "Sets entropy to prepare for clearing via shuffle"
      },
      "trancheEntropy(uint256)": {
        "notice": "Entropies per tranche from Chainlink VRF"
      },
      "trancheOffset(uint256)": {
        "notice": "Track tokenId offset for tranches"
      },
      "trancheRaffleEntries(uint256,uint256)": {
        "notice": "Array of raffle entries per tranche"
      },
      "trancheShuffled(uint256)": {
        "notice": "Tranche shuffle status"
      },
      "validateSignature(address,uint256,bytes)": {
        "notice": "This function verifies that the current request is valid"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4880,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4886,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4888,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4588,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4073,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4068_storage)"
      },
      {
        "astId": 79,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 12041,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "usedAllowances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 12043,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "_allowancesSigner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 17519,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "WETH_TOKEN",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)11707"
      },
      {
        "astId": 17526,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "LINK_FEE",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 17546,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "currentRaffle",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 17549,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "availableSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 17552,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "raffleStartTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 17557,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "trancheOffset",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17563,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "trancheRaffleEntries",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 17568,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "trancheShuffled",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 17573,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "trancheEntropy",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17578,
        "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
        "label": "tokenMap",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)11707": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4068_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4068_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4068_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4065,
            "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4067,
            "contract": "contracts/WinnerBelt/WinnerBelt.sol:WinnerBelt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}