schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type FighterSkill {
  id: ID!
  fighter: FighterWithSkill
  fighter_id: String!
  aggression: BigInt
  awareness: BigInt
  determination: BigInt
  power: BigInt
  resilience: BigInt
  speed: BigInt
  aggregatePoints: BigInt
}

input FighterSkill_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fighter: String
  fighter_not: String
  fighter_gt: String
  fighter_lt: String
  fighter_gte: String
  fighter_lte: String
  fighter_in: [String!]
  fighter_not_in: [String!]
  fighter_contains: String
  fighter_contains_nocase: String
  fighter_not_contains: String
  fighter_not_contains_nocase: String
  fighter_starts_with: String
  fighter_starts_with_nocase: String
  fighter_not_starts_with: String
  fighter_not_starts_with_nocase: String
  fighter_ends_with: String
  fighter_ends_with_nocase: String
  fighter_not_ends_with: String
  fighter_not_ends_with_nocase: String
  fighter_: FighterWithSkill_filter
  fighter_id: String
  fighter_id_not: String
  fighter_id_gt: String
  fighter_id_lt: String
  fighter_id_gte: String
  fighter_id_lte: String
  fighter_id_in: [String!]
  fighter_id_not_in: [String!]
  fighter_id_contains: String
  fighter_id_contains_nocase: String
  fighter_id_not_contains: String
  fighter_id_not_contains_nocase: String
  fighter_id_starts_with: String
  fighter_id_starts_with_nocase: String
  fighter_id_not_starts_with: String
  fighter_id_not_starts_with_nocase: String
  fighter_id_ends_with: String
  fighter_id_ends_with_nocase: String
  fighter_id_not_ends_with: String
  fighter_id_not_ends_with_nocase: String
  aggression: BigInt
  aggression_not: BigInt
  aggression_gt: BigInt
  aggression_lt: BigInt
  aggression_gte: BigInt
  aggression_lte: BigInt
  aggression_in: [BigInt!]
  aggression_not_in: [BigInt!]
  awareness: BigInt
  awareness_not: BigInt
  awareness_gt: BigInt
  awareness_lt: BigInt
  awareness_gte: BigInt
  awareness_lte: BigInt
  awareness_in: [BigInt!]
  awareness_not_in: [BigInt!]
  determination: BigInt
  determination_not: BigInt
  determination_gt: BigInt
  determination_lt: BigInt
  determination_gte: BigInt
  determination_lte: BigInt
  determination_in: [BigInt!]
  determination_not_in: [BigInt!]
  power: BigInt
  power_not: BigInt
  power_gt: BigInt
  power_lt: BigInt
  power_gte: BigInt
  power_lte: BigInt
  power_in: [BigInt!]
  power_not_in: [BigInt!]
  resilience: BigInt
  resilience_not: BigInt
  resilience_gt: BigInt
  resilience_lt: BigInt
  resilience_gte: BigInt
  resilience_lte: BigInt
  resilience_in: [BigInt!]
  resilience_not_in: [BigInt!]
  speed: BigInt
  speed_not: BigInt
  speed_gt: BigInt
  speed_lt: BigInt
  speed_gte: BigInt
  speed_lte: BigInt
  speed_in: [BigInt!]
  speed_not_in: [BigInt!]
  aggregatePoints: BigInt
  aggregatePoints_not: BigInt
  aggregatePoints_gt: BigInt
  aggregatePoints_lt: BigInt
  aggregatePoints_gte: BigInt
  aggregatePoints_lte: BigInt
  aggregatePoints_in: [BigInt!]
  aggregatePoints_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum FighterSkill_orderBy {
  id
  fighter
  fighter_id
  aggression
  awareness
  determination
  power
  resilience
  speed
  aggregatePoints
}

type FighterWithSkill {
  id: ID!
  owner: Bytes!
  contractAddress: Bytes!
  tokenId: BigInt!
  registered: Boolean!
  project: NFTProject
  skills: FighterSkill
}

input FighterWithSkill_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  contractAddress: Bytes
  contractAddress_not: Bytes
  contractAddress_in: [Bytes!]
  contractAddress_not_in: [Bytes!]
  contractAddress_contains: Bytes
  contractAddress_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  registered: Boolean
  registered_not: Boolean
  registered_in: [Boolean!]
  registered_not_in: [Boolean!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: NFTProject_filter
  skills: String
  skills_not: String
  skills_gt: String
  skills_lt: String
  skills_gte: String
  skills_lte: String
  skills_in: [String!]
  skills_not_in: [String!]
  skills_contains: String
  skills_contains_nocase: String
  skills_not_contains: String
  skills_not_contains_nocase: String
  skills_starts_with: String
  skills_starts_with_nocase: String
  skills_not_starts_with: String
  skills_not_starts_with_nocase: String
  skills_ends_with: String
  skills_ends_with_nocase: String
  skills_not_ends_with: String
  skills_not_ends_with_nocase: String
  skills_: FighterSkill_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum FighterWithSkill_orderBy {
  id
  owner
  contractAddress
  tokenId
  registered
  project
  skills
}

type NFTProject {
  id: ID!
  contractAddress: Bytes!
  chainId: Int!
  tokenCount: Int
}

input NFTProject_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contractAddress: Bytes
  contractAddress_not: Bytes
  contractAddress_in: [Bytes!]
  contractAddress_not_in: [Bytes!]
  contractAddress_contains: Bytes
  contractAddress_not_contains: Bytes
  chainId: Int
  chainId_not: Int
  chainId_gt: Int
  chainId_lt: Int
  chainId_gte: Int
  chainId_lte: Int
  chainId_in: [Int!]
  chainId_not_in: [Int!]
  tokenCount: Int
  tokenCount_not: Int
  tokenCount_gt: Int
  tokenCount_lt: Int
  tokenCount_gte: Int
  tokenCount_lte: Int
  tokenCount_in: [Int!]
  tokenCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum NFTProject_orderBy {
  id
  contractAddress
  chainId
  tokenCount
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  nftproject(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTProject
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTProject_orderBy
    orderDirection: OrderDirection
    where: NFTProject_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTProject!]!
  fighterWithSkill(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FighterWithSkill
  fighterWithSkills(
    skip: Int = 0
    first: Int = 100
    orderBy: FighterWithSkill_orderBy
    orderDirection: OrderDirection
    where: FighterWithSkill_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FighterWithSkill!]!
  fighterSkill(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FighterSkill
  fighterSkills(
    skip: Int = 0
    first: Int = 100
    orderBy: FighterSkill_orderBy
    orderDirection: OrderDirection
    where: FighterSkill_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FighterSkill!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  nftproject(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTProject
  nftprojects(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTProject_orderBy
    orderDirection: OrderDirection
    where: NFTProject_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTProject!]!
  fighterWithSkill(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FighterWithSkill
  fighterWithSkills(
    skip: Int = 0
    first: Int = 100
    orderBy: FighterWithSkill_orderBy
    orderDirection: OrderDirection
    where: FighterWithSkill_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FighterWithSkill!]!
  fighterSkill(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FighterSkill
  fighterSkills(
    skip: Int = 0
    first: Int = 100
    orderBy: FighterSkill_orderBy
    orderDirection: OrderDirection
    where: FighterSkill_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FighterSkill!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}