schema {
  query: Query
  subscription: Subscription
}

type Query {
  nftproject(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTProject
  nftprojects(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTProject_orderBy
    orderDirection: OrderDirection
    where: NFTProject_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTProject!]!
  fighter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fighter
  fighters(
    skip: Int = 0
    first: Int = 100
    orderBy: Fighter_orderBy
    orderDirection: OrderDirection
    where: Fighter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Fighter!]! @merge(keyField: "id", keyArg: "where.id_in")
  syncStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SyncStatus
  syncStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: SyncStatus_orderBy
    orderDirection: OrderDirection
    where: SyncStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SyncStatus!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  SS_fighter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SS_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fighter @merge(keyField: "id", keyArg: "id")
  SS_fighters(
    skip: Int = 0
    first: Int = 100
    orderBy: SS_Fighter_orderBy
    orderDirection: SS_OrderDirection
    where: SS_Fighter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SS_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Fighter!]!
  SS_syncStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SS_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SyncStatus
  SS_syncStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: SS_SyncStatus_orderBy
    orderDirection: SS_OrderDirection
    where: SS_SyncStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SS_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SyncStatus!]!
  """Access to subgraph metadata"""
  SS__meta(block: SS_Block_height): SS__Meta_
}

type Subscription {
  nftproject(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTProject
  nftprojects(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTProject_orderBy
    orderDirection: OrderDirection
    where: NFTProject_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTProject!]!
  fighter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fighter
  fighters(
    skip: Int = 0
    first: Int = 100
    orderBy: Fighter_orderBy
    orderDirection: OrderDirection
    where: Fighter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Fighter!]!
  syncStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SyncStatus
  syncStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: SyncStatus_orderBy
    orderDirection: OrderDirection
    where: SyncStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SyncStatus!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  SS_fighter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SS_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fighter
  SS_fighters(
    skip: Int = 0
    first: Int = 100
    orderBy: SS_Fighter_orderBy
    orderDirection: SS_OrderDirection
    where: SS_Fighter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SS_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Fighter!]!
  SS_syncStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SS_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SyncStatus
  SS_syncStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: SS_SyncStatus_orderBy
    orderDirection: SS_OrderDirection
    where: SS_SyncStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SS_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SyncStatus!]!
  """Access to subgraph metadata"""
  SS__meta(block: SS_Block_height): SS__Meta_
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Fighter {
  id: ID!
  contractAddress: SS_Bytes!
  owner: Bytes!
  tokenId: SS_BigInt!
  syncs(skip: Int = 0, first: Int = 100, orderBy: SS_SyncStatus_orderBy, orderDirection: SS_OrderDirection, where: SS_SyncStatus_filter): [SyncStatus!]
  aggression: SS_BigInt!
  awareness: SS_BigInt!
  determination: SS_BigInt!
  power: SS_BigInt!
  resilience: SS_BigInt!
  speed: SS_BigInt!
  aggregatePoints: SS_BigInt!
}

input Fighter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contractAddress: Bytes
  contractAddress_not: Bytes
  contractAddress_in: [Bytes!]
  contractAddress_not_in: [Bytes!]
  contractAddress_contains: Bytes
  contractAddress_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
}

enum Fighter_orderBy {
  id
  contractAddress
  owner
  tokenId
  syncs
}

type NFTProject {
  id: ID!
  contractAddress: Bytes!
}

input NFTProject_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contractAddress: Bytes
  contractAddress_not: Bytes
  contractAddress_in: [Bytes!]
  contractAddress_not_in: [Bytes!]
  contractAddress_contains: Bytes
  contractAddress_not_contains: Bytes
}

enum NFTProject_orderBy {
  id
  contractAddress
}

enum OrderDirection {
  asc
  desc
}

type SyncStatus {
  id: ID!
  fighter: Fighter!
  timestamp: SS_BigInt!
  status: SS_SyncStatusEnum!
}

enum SyncStatusEnum {
  Unsynced
  Syncing
  Synced
}

input SyncStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fighter: String
  fighter_not: String
  fighter_gt: String
  fighter_lt: String
  fighter_gte: String
  fighter_lte: String
  fighter_in: [String!]
  fighter_not_in: [String!]
  fighter_contains: String
  fighter_not_contains: String
  fighter_starts_with: String
  fighter_not_starts_with: String
  fighter_ends_with: String
  fighter_not_ends_with: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  status: SyncStatusEnum
  status_not: SyncStatusEnum
  status_in: [SyncStatusEnum!]
  status_not_in: [SyncStatusEnum!]
}

enum SyncStatus_orderBy {
  id
  fighter
  timestamp
  status
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

scalar SS_BigDecimal

scalar SS_BigInt

input SS_Block_height {
  hash: SS_Bytes
  number: Int
  number_gte: Int
}

scalar SS_Bytes

input SS_Fighter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contractAddress: SS_Bytes
  contractAddress_not: SS_Bytes
  contractAddress_in: [SS_Bytes!]
  contractAddress_not_in: [SS_Bytes!]
  contractAddress_contains: SS_Bytes
  contractAddress_not_contains: SS_Bytes
  tokenId: SS_BigInt
  tokenId_not: SS_BigInt
  tokenId_gt: SS_BigInt
  tokenId_lt: SS_BigInt
  tokenId_gte: SS_BigInt
  tokenId_lte: SS_BigInt
  tokenId_in: [SS_BigInt!]
  tokenId_not_in: [SS_BigInt!]
  aggression: SS_BigInt
  aggression_not: SS_BigInt
  aggression_gt: SS_BigInt
  aggression_lt: SS_BigInt
  aggression_gte: SS_BigInt
  aggression_lte: SS_BigInt
  aggression_in: [SS_BigInt!]
  aggression_not_in: [SS_BigInt!]
  awareness: SS_BigInt
  awareness_not: SS_BigInt
  awareness_gt: SS_BigInt
  awareness_lt: SS_BigInt
  awareness_gte: SS_BigInt
  awareness_lte: SS_BigInt
  awareness_in: [SS_BigInt!]
  awareness_not_in: [SS_BigInt!]
  determination: SS_BigInt
  determination_not: SS_BigInt
  determination_gt: SS_BigInt
  determination_lt: SS_BigInt
  determination_gte: SS_BigInt
  determination_lte: SS_BigInt
  determination_in: [SS_BigInt!]
  determination_not_in: [SS_BigInt!]
  power: SS_BigInt
  power_not: SS_BigInt
  power_gt: SS_BigInt
  power_lt: SS_BigInt
  power_gte: SS_BigInt
  power_lte: SS_BigInt
  power_in: [SS_BigInt!]
  power_not_in: [SS_BigInt!]
  resilience: SS_BigInt
  resilience_not: SS_BigInt
  resilience_gt: SS_BigInt
  resilience_lt: SS_BigInt
  resilience_gte: SS_BigInt
  resilience_lte: SS_BigInt
  resilience_in: [SS_BigInt!]
  resilience_not_in: [SS_BigInt!]
  speed: SS_BigInt
  speed_not: SS_BigInt
  speed_gt: SS_BigInt
  speed_lt: SS_BigInt
  speed_gte: SS_BigInt
  speed_lte: SS_BigInt
  speed_in: [SS_BigInt!]
  speed_not_in: [SS_BigInt!]
  aggregatePoints: SS_BigInt
  aggregatePoints_not: SS_BigInt
  aggregatePoints_gt: SS_BigInt
  aggregatePoints_lt: SS_BigInt
  aggregatePoints_gte: SS_BigInt
  aggregatePoints_lte: SS_BigInt
  aggregatePoints_in: [SS_BigInt!]
  aggregatePoints_not_in: [SS_BigInt!]
  syncs: [String!]
  syncs_not: [String!]
  syncs_contains: [String!]
  syncs_not_contains: [String!]
}

enum SS_Fighter_orderBy {
  id
  contractAddress
  tokenId
  aggression
  awareness
  determination
  power
  resilience
  speed
  aggregatePoints
  syncs
}

enum SS_OrderDirection {
  asc
  desc
}

enum SS_SyncStatusEnum {
  Unsynced
  Syncing
  Synced
}

input SS_SyncStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fighter: String
  fighter_not: String
  fighter_gt: String
  fighter_lt: String
  fighter_gte: String
  fighter_lte: String
  fighter_in: [String!]
  fighter_not_in: [String!]
  fighter_contains: String
  fighter_not_contains: String
  fighter_starts_with: String
  fighter_not_starts_with: String
  fighter_ends_with: String
  fighter_not_ends_with: String
  timestamp: SS_BigInt
  timestamp_not: SS_BigInt
  timestamp_gt: SS_BigInt
  timestamp_lt: SS_BigInt
  timestamp_gte: SS_BigInt
  timestamp_lte: SS_BigInt
  timestamp_in: [SS_BigInt!]
  timestamp_not_in: [SS_BigInt!]
  status: SS_SyncStatusEnum
  status_not: SS_SyncStatusEnum
  status_in: [SS_SyncStatusEnum!]
  status_not_in: [SS_SyncStatusEnum!]
}

enum SS_SyncStatus_orderBy {
  id
  fighter
  timestamp
  status
}

type SS__Block_ {
  """The hash of the block"""
  hash: SS_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type SS__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: SS__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}