// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProjectRegistered extends ethereum.Event {
  get params(): ProjectRegistered__Params {
    return new ProjectRegistered__Params(this);
  }
}

export class ProjectRegistered__Params {
  _event: ProjectRegistered;

  constructor(event: ProjectRegistered) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get chainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TokenRegistered extends ethereum.Event {
  get params(): TokenRegistered__Params {
    return new TokenRegistered__Params(this);
  }
}

export class TokenRegistered__Params {
  _event: TokenRegistered;

  constructor(event: TokenRegistered) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NFightParent extends ethereum.SmartContract {
  static bind(address: Address): NFightParent {
    return new NFightParent("NFightParent", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SEND_MESSAGE_EVENT_SIG(): Bytes {
    let result = super.call(
      "SEND_MESSAGE_EVENT_SIG",
      "SEND_MESSAGE_EVENT_SIG():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SEND_MESSAGE_EVENT_SIG(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SEND_MESSAGE_EVENT_SIG",
      "SEND_MESSAGE_EVENT_SIG():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  checkpointManager(): Address {
    let result = super.call(
      "checkpointManager",
      "checkpointManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_checkpointManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "checkpointManager",
      "checkpointManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fxChildTunnel(): Address {
    let result = super.call("fxChildTunnel", "fxChildTunnel():(address)", []);

    return result[0].toAddress();
  }

  try_fxChildTunnel(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fxChildTunnel",
      "fxChildTunnel():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fxRoot(): Address {
    let result = super.call("fxRoot", "fxRoot():(address)", []);

    return result[0].toAddress();
  }

  try_fxRoot(): ethereum.CallResult<Address> {
    let result = super.tryCall("fxRoot", "fxRoot():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  jsonDataForToken(mainnetContract: Address, tokenId: BigInt): string {
    let result = super.call(
      "jsonDataForToken",
      "jsonDataForToken(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(mainnetContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toString();
  }

  try_jsonDataForToken(
    mainnetContract: Address,
    tokenId: BigInt
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "jsonDataForToken",
      "jsonDataForToken(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(mainnetContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  processedExits(param0: Bytes): boolean {
    let result = super.call(
      "processedExits",
      "processedExits(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_processedExits(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "processedExits",
      "processedExits(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registeredContract(param0: Address): boolean {
    let result = super.call(
      "registeredContract",
      "registeredContract(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_registeredContract(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registeredContract",
      "registeredContract(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registeredProjects(param0: Address): boolean {
    let result = super.call(
      "registeredProjects",
      "registeredProjects(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_registeredProjects(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registeredProjects",
      "registeredProjects(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _checkpointManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fxRoot(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class JsonDataForTokenCall extends ethereum.Call {
  get inputs(): JsonDataForTokenCall__Inputs {
    return new JsonDataForTokenCall__Inputs(this);
  }

  get outputs(): JsonDataForTokenCall__Outputs {
    return new JsonDataForTokenCall__Outputs(this);
  }
}

export class JsonDataForTokenCall__Inputs {
  _call: JsonDataForTokenCall;

  constructor(call: JsonDataForTokenCall) {
    this._call = call;
  }

  get mainnetContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class JsonDataForTokenCall__Outputs {
  _call: JsonDataForTokenCall;

  constructor(call: JsonDataForTokenCall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class ReceiveMessageCall extends ethereum.Call {
  get inputs(): ReceiveMessageCall__Inputs {
    return new ReceiveMessageCall__Inputs(this);
  }

  get outputs(): ReceiveMessageCall__Outputs {
    return new ReceiveMessageCall__Outputs(this);
  }
}

export class ReceiveMessageCall__Inputs {
  _call: ReceiveMessageCall;

  constructor(call: ReceiveMessageCall) {
    this._call = call;
  }

  get inputData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ReceiveMessageCall__Outputs {
  _call: ReceiveMessageCall;

  constructor(call: ReceiveMessageCall) {
    this._call = call;
  }
}

export class RegisterProjectCall extends ethereum.Call {
  get inputs(): RegisterProjectCall__Inputs {
    return new RegisterProjectCall__Inputs(this);
  }

  get outputs(): RegisterProjectCall__Outputs {
    return new RegisterProjectCall__Outputs(this);
  }
}

export class RegisterProjectCall__Inputs {
  _call: RegisterProjectCall;

  constructor(call: RegisterProjectCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterProjectCall__Outputs {
  _call: RegisterProjectCall;

  constructor(call: RegisterProjectCall) {
    this._call = call;
  }
}

export class RegisterTokenCall extends ethereum.Call {
  get inputs(): RegisterTokenCall__Inputs {
    return new RegisterTokenCall__Inputs(this);
  }

  get outputs(): RegisterTokenCall__Outputs {
    return new RegisterTokenCall__Outputs(this);
  }
}

export class RegisterTokenCall__Inputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RegisterTokenCall__Outputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetFxChildTunnelCall extends ethereum.Call {
  get inputs(): SetFxChildTunnelCall__Inputs {
    return new SetFxChildTunnelCall__Inputs(this);
  }

  get outputs(): SetFxChildTunnelCall__Outputs {
    return new SetFxChildTunnelCall__Outputs(this);
  }
}

export class SetFxChildTunnelCall__Inputs {
  _call: SetFxChildTunnelCall;

  constructor(call: SetFxChildTunnelCall) {
    this._call = call;
  }

  get _fxChildTunnel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFxChildTunnelCall__Outputs {
  _call: SetFxChildTunnelCall;

  constructor(call: SetFxChildTunnelCall) {
    this._call = call;
  }
}
